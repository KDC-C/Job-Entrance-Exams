import java.io.*; 
import java.nio.charset.StandardCharsets;
import java.util.*;

public class MachineProblem3 {

    //  This method computes the total FX_SELL and FX_BUY in PHP for the given date
    public void compute(String currencyFile, String transactionFile, String outputFile, String txnDate) {
        Map<String, Double> currencyRates = new HashMap<>(); //  Will store {currency code -> rate}
        double fxSellTotalPHP = 0.0; //  Accumulator for FX_SELL transactions in PHP
        double fxBuyTotalPHP = 0.0;  //  Accumulator for FX_BUY transactions in PHP

        // --- Step 1: Read the currency rates file ---
        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(currencyFile), StandardCharsets.UTF_8))) {
            String line = br.readLine(); //  Read and skip the header line
            while ((line = br.readLine()) != null) { //  Read each remaining line
                String[] parts = line.split(",");
                if (parts.length >= 5) {
                    String currency = parts[1].trim();   //  Currency code (e.g., JPY)
                    double rate = Double.parseDouble(parts[4].trim()); //  Rate to PHP (e.g., 0.40)
                    currencyRates.put(currency, rate); //  Save into the map
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading currency file: " + e.getMessage());
            return; //  Exit if file problem
        }

        // --- Step 2: Read the transaction file and compute totals ---
        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(transactionFile), StandardCharsets.UTF_8))) {
            String line = br.readLine(); //  Skip header line
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 5) {
                    String currency = parts[1].trim(); //  Get currency from transaction
                    String txnType = parts[2].trim();  //  Get transaction type (FX_SELL or FX_BUY)
                    String date = parts[3].trim();     //  Get transaction date
                    double amount = Double.parseDouble(parts[4].trim()); //  Get transaction amount

                    if (txnDate.equals(date)) { //  Check if transaction date matches user input
                        double rate = currencyRates.getOrDefault(currency, 1.0); //  Get rate from map, default 1.0
                        double phpAmount = amount * rate; //  Convert amount to PHP

                        if (txnType.equalsIgnoreCase("FX_SELL")) { 
                            fxSellTotalPHP += phpAmount; //  Add to FX_SELL total
                        } else if (txnType.equalsIgnoreCase("FX_BUY")) {
                            fxBuyTotalPHP += phpAmount;  //  Add to FX_BUY total
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading transaction file: " + e.getMessage());
            return;
        }

        // --- Step 3: Write the results to output file ---
        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), StandardCharsets.UTF_8))) {
            bw.write(String.format("FX_SELL=%.2f%n", fxSellTotalPHP)); //  Write FX_SELL total (2 decimal places)
            bw.write(String.format("FX_BUY=%.2f%n", fxBuyTotalPHP));   //  Write FX_BUY total (2 decimal places)
        } catch (IOException e) {
            System.out.println("Error writing output file: " + e.getMessage());
        }

        System.out.println("Computation done! Output written to " + outputFile);
    }

    //  Main method (Entry point)
    public static void main(String[] args) {
        MachineProblem3 mp = new MachineProblem3(); //  Create object of our class

        Scanner scanner = new Scanner(System.in); //  For user input
        System.out.print("Enter transaction date (yyyy-MM-dd): ");
        String txnDate = scanner.nextLine().trim(); //  Get txnDate from user

        String currencyFile = "resources/currency.csv"; //  Path to currency rates file
        String transactionFile = "resources/transaction.csv"; //  Path to transactions file
        String outputFile = "resources/output.txt"; //  Path where result will be saved

        mp.compute(currencyFile, transactionFile, outputFile, txnDate); //  Call compute method
    }
}
